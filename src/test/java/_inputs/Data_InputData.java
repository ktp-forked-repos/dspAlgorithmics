//	@formatter:off

package _inputs;

public class Data_InputData {

	public static byte[]
		sample_mono_wav = new byte[]{

			(byte) 0x52, (byte) 0x49, (byte) 0x46, (byte) 0x46,	//	 0	RIFF 	head
			(byte) 0x58, (byte) 0x00, (byte) 0x00, (byte) 0x00,	//	 4			chunk size
			(byte) 0x57, (byte) 0x41, (byte) 0x56, (byte) 0x45,	//	 8	WAVE	type

			(byte) 0x66, (byte) 0x6D, (byte) 0x74, (byte) 0x20,	//	12	fmt 	head
			(byte) 0x10, (byte) 0x00, (byte) 0x00, (byte) 0x00,	//	16			chunk size
			(byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x00,	//	20			fmtTag / channels
			(byte) 0x44, (byte) 0xAC, (byte) 0x00, (byte) 0x00,	//	24			sampling rate
			(byte) 0xCC, (byte) 0x04, (byte) 0x02, (byte) 0x00,	//	28			data rate
			(byte) 0x03, (byte) 0x00, (byte) 0x18, (byte) 0x00,	//	32			block size / bitDepth

			(byte) 0x64, (byte) 0x61, (byte) 0x74, (byte) 0x61,	//	36	data	head
			(byte) 0x0C, (byte) 0x00, (byte) 0x00, (byte) 0x00,	//	40			chunk size

			(byte) 0x00, (byte) 0x00, (byte) 0x80, (byte) 0x01,	//	44			signal
			(byte) 0x00, (byte) 0x00, (byte) 0xFF, (byte) 0xFF,
			(byte) 0x7F, (byte) 0x00, (byte) 0x00, (byte) 0x80,
			(byte) 0x53, (byte) 0x41, (byte) 0x55, (byte) 0x52,

			(byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x31, (byte) 0x2E, (byte) 0x32, (byte) 0x2E,
			(byte) 0x30, (byte) 0x2E, (byte) 0x30, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,

			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00
		},
		sample_mono_aiff = new byte[]{

			(byte) 0x46, (byte) 0x4f, (byte) 0x52, (byte) 0x4d,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x3a,
			(byte) 0x41, (byte) 0x49, (byte) 0x46, (byte) 0x46,
			(byte) 0x43, (byte) 0x4f, (byte) 0x4d, (byte) 0x4d,

			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x12,
			(byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x18,
			(byte) 0x40, (byte) 0x0e, (byte) 0xac, (byte) 0x44,

			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x53, (byte) 0x53,
			(byte) 0x4e, (byte) 0x44, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x14, (byte) 0x00, (byte) 0x00,

			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x80, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x7f, (byte) 0xff, (byte) 0xff, (byte) 0x80,

			(byte) 0x00, (byte) 0x00
		};
}

//	@formatter:on